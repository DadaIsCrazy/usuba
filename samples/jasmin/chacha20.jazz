/* Copyright (C) 1991-2017 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */
/* This header is separate from features.h so that the compiler can
   include it implicitly at the start of every compilation.  It must
   not itself include <features.h> or any other header that includes
   <features.h> because the implicit include comes before any feature
   test macros that may be defined in a source file before it first
   explicitly includes a system header.  GCC knows the name of this
   header in order to preinclude it.  */
/* glibc's intent is to support the IEC 559 math functionality, real
   and complex.  If the GCC (4.9 and later) predefined macros
   specifying compiler intent are available, use them to determine
   whether the overall intent is to support these features; otherwise,
   presume an older compiler has intent to support these features and
   define these macros by default.  */
/* wchar_t uses Unicode 10.0.0.  Version 10.0 of the Unicode Standard is
   synchronized with ISO/IEC 10646:2017, fifth edition, plus
   the following additions from Amendment 1 to the fifth edition:
   - 56 emoji characters
   - 285 hentaigana
   - 3 additional Zanabazar Square characters */
/* We do not support C11 <threads.h>.  */
/* This code was generated by Usuba.
   See https://github.com/DadaIsCrazy/usuba.
   From the file "samples/usuba/chacha20.ua" (included below). */
/* ******************************************** * * 
 
 * 
 *
\* ******************************************** */
/* Including headers */
       
// TODO: Don't harcode addition type
u256 l_rotate_8_mask = (32u8)[14,13,12,15, 10,9,8,11, 6,5,4,7, 2,1,0,3, 14,13,12,15, 10,9,8,11, 6,5,4,7, 2,1,0,3];
u256 l_rotate_16_mask = (32u8)[13,12,15,14, 9,8,11,10, 5,4,7,6, 1,0,3,2, 13,12,15,14, 9,8,11,10, 5,4,7,6, 1,0,3,2];
fn L_ROTATE(reg u256 k, inline int r) -> reg u256
{
  reg u256 t;
  if(r==16){
    k = #x86_VPSHUFB_256(k, l_rotate_16_mask);
  } else { if (r==8) {
    k = #x86_VPSHUFB_256(k, l_rotate_8_mask);
  } else {
    t = k <<8u32 r;
    k = k >>8u32 (32-r);
    k ^= t;
  }}
  return k;
}
/* auxiliary functions */
inline fn DR__ (reg u256 [16] state__) -> reg u256 [16] {
  // Outputs declarations
  reg u256 [16] stateR__;
  // Variables declaration
  reg u256 DR_end___1_QR___1_QR_end___1__tmp3_;
  reg u256 DR_end___1_QR___1_QR_end___1__tmp4_;
  reg u256 DR_end___1_QR___1_QR_start___1__tmp1_;
  reg u256 DR_end___1_QR___1_QR_start___1__tmp2_;
  reg u256 [4] DR_end___1_QR___1__tmp5_;
  reg u256 DR_end___1_QR___2_QR_end___1__tmp3_;
  reg u256 DR_end___1_QR___2_QR_end___1__tmp4_;
  reg u256 DR_end___1_QR___2_QR_start___1__tmp1_;
  reg u256 DR_end___1_QR___2_QR_start___1__tmp2_;
  reg u256 [4] DR_end___1_QR___2__tmp5_;
  reg u256 DR_end___1_QR___3_QR_end___1__tmp3_;
  reg u256 DR_end___1_QR___3_QR_end___1__tmp4_;
  reg u256 DR_end___1_QR___3_QR_start___1__tmp1_;
  reg u256 DR_end___1_QR___3_QR_start___1__tmp2_;
  reg u256 [4] DR_end___1_QR___3__tmp5_;
  reg u256 DR_end___1_QR___4_QR_end___1__tmp3_;
  reg u256 DR_end___1_QR___4_QR_end___1__tmp4_;
  reg u256 DR_end___1_QR___4_QR_start___1__tmp1_;
  reg u256 DR_end___1_QR___4_QR_start___1__tmp2_;
  reg u256 [4] DR_end___1_QR___4__tmp5_;
  reg u256 DR_start___1_QR___1_QR_end___1__tmp3_;
  reg u256 DR_start___1_QR___1_QR_end___1__tmp4_;
  reg u256 DR_start___1_QR___1_QR_start___1__tmp1_;
  reg u256 DR_start___1_QR___1_QR_start___1__tmp2_;
  reg u256 [4] DR_start___1_QR___1__tmp5_;
  reg u256 DR_start___1_QR___2_QR_end___1__tmp3_;
  reg u256 DR_start___1_QR___2_QR_end___1__tmp4_;
  reg u256 DR_start___1_QR___2_QR_start___1__tmp1_;
  reg u256 DR_start___1_QR___2_QR_start___1__tmp2_;
  reg u256 [4] DR_start___1_QR___2__tmp5_;
  reg u256 DR_start___1_QR___3_QR_end___1__tmp3_;
  reg u256 DR_start___1_QR___3_QR_end___1__tmp4_;
  reg u256 DR_start___1_QR___3_QR_start___1__tmp1_;
  reg u256 DR_start___1_QR___3_QR_start___1__tmp2_;
  reg u256 [4] DR_start___1_QR___3__tmp5_;
  reg u256 DR_start___1_QR___4_QR_end___1__tmp3_;
  reg u256 DR_start___1_QR___4_QR_end___1__tmp4_;
  reg u256 DR_start___1_QR___4_QR_start___1__tmp1_;
  reg u256 DR_start___1_QR___4_QR_start___1__tmp2_;
  reg u256 [4] DR_start___1_QR___4__tmp5_;
  reg u256 [16] _tmp6_;
  // Loop counters
  // Instructions (body)
  DR_start___1_QR___1__tmp5_[0] = state__[0] +8u32 state__[4];
  DR_start___1_QR___2__tmp5_[0] = state__[1] +8u32 state__[5];
  DR_start___1_QR___3__tmp5_[0] = state__[2] +8u32 state__[6];
  DR_start___1_QR___4__tmp5_[0] = state__[3] +8u32 state__[7];
  DR_start___1_QR___1_QR_start___1__tmp1_ = state__[12] ^ DR_start___1_QR___1__tmp5_[0];
  DR_start___1_QR___2_QR_start___1__tmp1_ = state__[13] ^ DR_start___1_QR___2__tmp5_[0];
  DR_start___1_QR___3_QR_start___1__tmp1_ = state__[14] ^ DR_start___1_QR___3__tmp5_[0];
  DR_start___1_QR___4_QR_start___1__tmp1_ = state__[15] ^ DR_start___1_QR___4__tmp5_[0];
  DR_start___1_QR___1__tmp5_[3] = L_ROTATE(DR_start___1_QR___1_QR_start___1__tmp1_,16);
  DR_start___1_QR___2__tmp5_[3] = L_ROTATE(DR_start___1_QR___2_QR_start___1__tmp1_,16);
  DR_start___1_QR___3__tmp5_[3] = L_ROTATE(DR_start___1_QR___3_QR_start___1__tmp1_,16);
  DR_start___1_QR___4__tmp5_[3] = L_ROTATE(DR_start___1_QR___4_QR_start___1__tmp1_,16);
  DR_start___1_QR___1__tmp5_[2] = state__[8] +8u32 DR_start___1_QR___1__tmp5_[3];
  DR_start___1_QR___2__tmp5_[2] = state__[9] +8u32 DR_start___1_QR___2__tmp5_[3];
  DR_start___1_QR___3__tmp5_[2] = state__[10] +8u32 DR_start___1_QR___3__tmp5_[3];
  DR_start___1_QR___4__tmp5_[2] = state__[11] +8u32 DR_start___1_QR___4__tmp5_[3];
  DR_start___1_QR___1_QR_start___1__tmp2_ = state__[4] ^ DR_start___1_QR___1__tmp5_[2];
  DR_start___1_QR___2_QR_start___1__tmp2_ = state__[5] ^ DR_start___1_QR___2__tmp5_[2];
  DR_start___1_QR___3_QR_start___1__tmp2_ = state__[6] ^ DR_start___1_QR___3__tmp5_[2];
  DR_start___1_QR___4_QR_start___1__tmp2_ = state__[7] ^ DR_start___1_QR___4__tmp5_[2];
  DR_start___1_QR___1__tmp5_[1] = L_ROTATE(DR_start___1_QR___1_QR_start___1__tmp2_,12);
  DR_start___1_QR___2__tmp5_[1] = L_ROTATE(DR_start___1_QR___2_QR_start___1__tmp2_,12);
  DR_start___1_QR___3__tmp5_[1] = L_ROTATE(DR_start___1_QR___3_QR_start___1__tmp2_,12);
  DR_start___1_QR___4__tmp5_[1] = L_ROTATE(DR_start___1_QR___4_QR_start___1__tmp2_,12);
  _tmp6_[0] = DR_start___1_QR___1__tmp5_[0] +8u32 DR_start___1_QR___1__tmp5_[1];
  _tmp6_[1] = DR_start___1_QR___2__tmp5_[0] +8u32 DR_start___1_QR___2__tmp5_[1];
  _tmp6_[2] = DR_start___1_QR___3__tmp5_[0] +8u32 DR_start___1_QR___3__tmp5_[1];
  _tmp6_[3] = DR_start___1_QR___4__tmp5_[0] +8u32 DR_start___1_QR___4__tmp5_[1];
  DR_start___1_QR___1_QR_end___1__tmp3_ = DR_start___1_QR___1__tmp5_[3] ^ _tmp6_[0];
  DR_start___1_QR___2_QR_end___1__tmp3_ = DR_start___1_QR___2__tmp5_[3] ^ _tmp6_[1];
  DR_start___1_QR___3_QR_end___1__tmp3_ = DR_start___1_QR___3__tmp5_[3] ^ _tmp6_[2];
  DR_start___1_QR___4_QR_end___1__tmp3_ = DR_start___1_QR___4__tmp5_[3] ^ _tmp6_[3];
  _tmp6_[12] = L_ROTATE(DR_start___1_QR___1_QR_end___1__tmp3_,8);
  _tmp6_[13] = L_ROTATE(DR_start___1_QR___2_QR_end___1__tmp3_,8);
  _tmp6_[14] = L_ROTATE(DR_start___1_QR___3_QR_end___1__tmp3_,8);
  _tmp6_[15] = L_ROTATE(DR_start___1_QR___4_QR_end___1__tmp3_,8);
  _tmp6_[8] = DR_start___1_QR___1__tmp5_[2] +8u32 _tmp6_[12];
  _tmp6_[9] = DR_start___1_QR___2__tmp5_[2] +8u32 _tmp6_[13];
  _tmp6_[10] = DR_start___1_QR___3__tmp5_[2] +8u32 _tmp6_[14];
  _tmp6_[11] = DR_start___1_QR___4__tmp5_[2] +8u32 _tmp6_[15];
  DR_start___1_QR___1_QR_end___1__tmp4_ = DR_start___1_QR___1__tmp5_[1] ^ _tmp6_[8];
  DR_start___1_QR___2_QR_end___1__tmp4_ = DR_start___1_QR___2__tmp5_[1] ^ _tmp6_[9];
  DR_start___1_QR___3_QR_end___1__tmp4_ = DR_start___1_QR___3__tmp5_[1] ^ _tmp6_[10];
  DR_start___1_QR___4_QR_end___1__tmp4_ = DR_start___1_QR___4__tmp5_[1] ^ _tmp6_[11];
  _tmp6_[4] = L_ROTATE(DR_start___1_QR___1_QR_end___1__tmp4_,7);
  _tmp6_[5] = L_ROTATE(DR_start___1_QR___2_QR_end___1__tmp4_,7);
  _tmp6_[6] = L_ROTATE(DR_start___1_QR___3_QR_end___1__tmp4_,7);
  _tmp6_[7] = L_ROTATE(DR_start___1_QR___4_QR_end___1__tmp4_,7);
  DR_end___1_QR___4__tmp5_[0] = _tmp6_[3] +8u32 _tmp6_[4];
  DR_end___1_QR___1__tmp5_[0] = _tmp6_[0] +8u32 _tmp6_[5];
  DR_end___1_QR___2__tmp5_[0] = _tmp6_[1] +8u32 _tmp6_[6];
  DR_end___1_QR___3__tmp5_[0] = _tmp6_[2] +8u32 _tmp6_[7];
  DR_end___1_QR___4_QR_start___1__tmp1_ = _tmp6_[14] ^ DR_end___1_QR___4__tmp5_[0];
  DR_end___1_QR___1_QR_start___1__tmp1_ = _tmp6_[15] ^ DR_end___1_QR___1__tmp5_[0];
  DR_end___1_QR___2_QR_start___1__tmp1_ = _tmp6_[12] ^ DR_end___1_QR___2__tmp5_[0];
  DR_end___1_QR___3_QR_start___1__tmp1_ = _tmp6_[13] ^ DR_end___1_QR___3__tmp5_[0];
  DR_end___1_QR___4__tmp5_[3] = L_ROTATE(DR_end___1_QR___4_QR_start___1__tmp1_,16);
  DR_end___1_QR___1__tmp5_[3] = L_ROTATE(DR_end___1_QR___1_QR_start___1__tmp1_,16);
  DR_end___1_QR___2__tmp5_[3] = L_ROTATE(DR_end___1_QR___2_QR_start___1__tmp1_,16);
  DR_end___1_QR___3__tmp5_[3] = L_ROTATE(DR_end___1_QR___3_QR_start___1__tmp1_,16);
  DR_end___1_QR___4__tmp5_[2] = _tmp6_[9] +8u32 DR_end___1_QR___4__tmp5_[3];
  DR_end___1_QR___1__tmp5_[2] = _tmp6_[10] +8u32 DR_end___1_QR___1__tmp5_[3];
  DR_end___1_QR___2__tmp5_[2] = _tmp6_[11] +8u32 DR_end___1_QR___2__tmp5_[3];
  DR_end___1_QR___3__tmp5_[2] = _tmp6_[8] +8u32 DR_end___1_QR___3__tmp5_[3];
  DR_end___1_QR___4_QR_start___1__tmp2_ = _tmp6_[4] ^ DR_end___1_QR___4__tmp5_[2];
  DR_end___1_QR___1_QR_start___1__tmp2_ = _tmp6_[5] ^ DR_end___1_QR___1__tmp5_[2];
  DR_end___1_QR___2_QR_start___1__tmp2_ = _tmp6_[6] ^ DR_end___1_QR___2__tmp5_[2];
  DR_end___1_QR___3_QR_start___1__tmp2_ = _tmp6_[7] ^ DR_end___1_QR___3__tmp5_[2];
  DR_end___1_QR___4__tmp5_[1] = L_ROTATE(DR_end___1_QR___4_QR_start___1__tmp2_,12);
  DR_end___1_QR___1__tmp5_[1] = L_ROTATE(DR_end___1_QR___1_QR_start___1__tmp2_,12);
  DR_end___1_QR___2__tmp5_[1] = L_ROTATE(DR_end___1_QR___2_QR_start___1__tmp2_,12);
  DR_end___1_QR___3__tmp5_[1] = L_ROTATE(DR_end___1_QR___3_QR_start___1__tmp2_,12);
  stateR__[3] = DR_end___1_QR___4__tmp5_[0] +8u32 DR_end___1_QR___4__tmp5_[1];
  stateR__[0] = DR_end___1_QR___1__tmp5_[0] +8u32 DR_end___1_QR___1__tmp5_[1];
  stateR__[1] = DR_end___1_QR___2__tmp5_[0] +8u32 DR_end___1_QR___2__tmp5_[1];
  stateR__[2] = DR_end___1_QR___3__tmp5_[0] +8u32 DR_end___1_QR___3__tmp5_[1];
  DR_end___1_QR___4_QR_end___1__tmp3_ = DR_end___1_QR___4__tmp5_[3] ^ stateR__[3];
  DR_end___1_QR___1_QR_end___1__tmp3_ = DR_end___1_QR___1__tmp5_[3] ^ stateR__[0];
  DR_end___1_QR___2_QR_end___1__tmp3_ = DR_end___1_QR___2__tmp5_[3] ^ stateR__[1];
  DR_end___1_QR___3_QR_end___1__tmp3_ = DR_end___1_QR___3__tmp5_[3] ^ stateR__[2];
  stateR__[14] = L_ROTATE(DR_end___1_QR___4_QR_end___1__tmp3_,8);
  stateR__[15] = L_ROTATE(DR_end___1_QR___1_QR_end___1__tmp3_,8);
  stateR__[12] = L_ROTATE(DR_end___1_QR___2_QR_end___1__tmp3_,8);
  stateR__[13] = L_ROTATE(DR_end___1_QR___3_QR_end___1__tmp3_,8);
  stateR__[9] = DR_end___1_QR___4__tmp5_[2] +8u32 stateR__[14];
  stateR__[10] = DR_end___1_QR___1__tmp5_[2] +8u32 stateR__[15];
  stateR__[11] = DR_end___1_QR___2__tmp5_[2] +8u32 stateR__[12];
  stateR__[8] = DR_end___1_QR___3__tmp5_[2] +8u32 stateR__[13];
  DR_end___1_QR___4_QR_end___1__tmp4_ = DR_end___1_QR___4__tmp5_[1] ^ stateR__[9];
  DR_end___1_QR___1_QR_end___1__tmp4_ = DR_end___1_QR___1__tmp5_[1] ^ stateR__[10];
  DR_end___1_QR___2_QR_end___1__tmp4_ = DR_end___1_QR___2__tmp5_[1] ^ stateR__[11];
  DR_end___1_QR___3_QR_end___1__tmp4_ = DR_end___1_QR___3__tmp5_[1] ^ stateR__[8];
  stateR__[4] = L_ROTATE(DR_end___1_QR___4_QR_end___1__tmp4_,7);
  stateR__[5] = L_ROTATE(DR_end___1_QR___1_QR_end___1__tmp4_,7);
  stateR__[6] = L_ROTATE(DR_end___1_QR___2_QR_end___1__tmp4_,7);
  stateR__[7] = L_ROTATE(DR_end___1_QR___3_QR_end___1__tmp4_,7);
  // Return
  return stateR__;
}
/* main function */
export fn Chacha20__ (reg u256 [16] plain__) -> reg u256 [16] {
  // Outputs declarations
  reg u256 [16] cipher__;
  // Variables declaration
  reg u256 [16] state__;
  // Loop counters
  reg u64 i;
  // Instructions (body)
  state__[0] = plain__[0];
  state__[1] = plain__[1];
  state__[2] = plain__[2];
  state__[3] = plain__[3];
  state__[4] = plain__[4];
  state__[5] = plain__[5];
  state__[6] = plain__[6];
  state__[7] = plain__[7];
  state__[8] = plain__[8];
  state__[9] = plain__[9];
  state__[10] = plain__[10];
  state__[11] = plain__[11];
  state__[12] = plain__[12];
  state__[13] = plain__[13];
  state__[14] = plain__[14];
  state__[15] = plain__[15];
  i = 1;
  while ( i <= 10 ) {
    state__ = DR__(state__);
    i += 1;
  }
  cipher__[0] = state__[0];
  cipher__[1] = state__[1];
  cipher__[2] = state__[2];
  cipher__[3] = state__[3];
  cipher__[4] = state__[4];
  cipher__[5] = state__[5];
  cipher__[6] = state__[6];
  cipher__[7] = state__[7];
  cipher__[8] = state__[8];
  cipher__[9] = state__[9];
  cipher__[10] = state__[10];
  cipher__[11] = state__[11];
  cipher__[12] = state__[12];
  cipher__[13] = state__[13];
  cipher__[14] = state__[14];
  cipher__[15] = state__[15];
  // Return
  return cipher__;
}
/* **************************************************************** */
/*                            Usuba source                          */
/*                                                                  */
/*

 node QR_start(a :  u32x1 :: base,b :  u32x1 :: base,c :  u32x1 :: base,d :  u32x1 :: base)
  returns aR :  u32x1 :: base,bR :  u32x1 :: base,cR :  u32x1 :: base,dR :  u32x1 :: base
vars

let
  (aR) = (a + b);
  (dR) = ((d ^ aR) <<< 16);
  (cR) = (c + dR);
  (bR) = ((b ^ cR) <<< 12)
tel

 node QR_end(a :  u32x1 :: base,b :  u32x1 :: base,c :  u32x1 :: base,d :  u32x1 :: base)
  returns aR :  u32x1 :: base,bR :  u32x1 :: base,cR :  u32x1 :: base,dR :  u32x1 :: base
vars

let
  (aR) = (a + b);
  (dR) = ((d ^ aR) <<< 8);
  (cR) = (c + dR);
  (bR) = ((b ^ cR) <<< 7)
tel

 node QR(input :  u32x4 :: base)
  returns output :  u32x4 :: base
vars

let
  (output) = QR_end(QR_start(input))
tel

 node DR_start(state :  u32x16 :: base)
  returns stateR :  u32x16 :: base
vars

let
  (stateR[0,4,8,12]) = QR(state[0,4,8,12]);
  (stateR[1,5,9,13]) = QR(state[1,5,9,13]);
  (stateR[2,6,10,14]) = QR(state[2,6,10,14]);
  (stateR[3,7,11,15]) = QR(state[3,7,11,15])
tel

 node DR_end(state :  u32x16 :: base)
  returns stateR :  u32x16 :: base
vars

let
  (stateR[0,5,10,15]) = QR(state[0,5,10,15]);
  (stateR[1,6,11,12]) = QR(state[1,6,11,12]);
  (stateR[2,7,8,13]) = QR(state[2,7,8,13]);
  (stateR[3,4,9,14]) = QR(state[3,4,9,14])
tel

_no_inline node DR(state :  u32x16 :: base)
  returns stateR :  u32x16 :: base
vars

let
  (stateR) = DR_end(DR_start(state))
tel

 node Chacha20(plain :  u32x16 :: base)
  returns cipher :  u32x16 :: base
vars
  state :  u32x16[11] :: base
let
  (state[0]) = plain;
  _no_unroll forall i in [1,10] {
    (state[i]) = DR(state[(i - 1)])
  };
  (cipher) = state[10]
tel

*/
