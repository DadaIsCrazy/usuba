node sbox_1 (a1:int::_, a2:int::_, a3:int::_, a4:int::_, a5:int::_, a6:int::_ )
     returns out1:int::_, out2:int::_, out3:int::_, out4:int::_
let
    x1 = not(a4);
	x2 = not(a1);
	x3 = xor(a4,a3);
	x4 = xor(x3,x2);
	x5 = or(a3,x2);
	x6 = and(x5,x1);
	x7 = or(a6,x6);
	x8 = xor(x4,x7);
	x9 = or(x1,x2);
	x10 = and(a6,x9);
	x11 = xor(x7,x10);
	x12 = or(a2,x11);
	x13 = xor(x8,x12);
	x14 = xor(x9,x13);
	x15 = or(a6,x14);
	x16 = xor(x1,x15);
	x17 = not(x14);
	x18 = and(x17,x3);
	x19 = or(a2,x18);
	x20 = xor(x16,x19);
	x21 = or(a5,x20);
	x22 = xor(x13,x21);
	out4 = x22;
	x23 = or(a3,x4);
	x24 = not(x23);
	x25 = or(a6,x24);
	x26 = xor(x6,x25);
	x27 = and(x1,x8);
	x28 = or(a2,x27);
	x29 = xor(x26,x28);
	x30 = or(x1,x8);
	x31 = xor(x30,x6);
	x32 = and(x5,x14);
	x33 = xor(x32,x8);
	x34 = and(a2,x33);
	x35 = xor(x31,x34);
	x36 = or(a5,x35);
	x37 = xor(x29,x36);
	out1 = x37;
	x38 = and(a3,x10);
	x39 = or(x38,x4);
	x40 = and(a3,x33);
	x41 = xor(x40,x25);
	x42 = or(a2,x41);
	x43 = xor(x39,x42);
	x44 = or(a3,x26);
	x45 = xor(x44,x14);
	x46 = or(a1,x8);
	x47 = xor(x46,x20);
	x48 = or(a2,x47);
	x49 = xor(x45,x48);
	x50 = and(a5,x49);
	x51 = xor(x43,x50);
	out2 = x51;
	x52 = xor(x8,x40);
	x53 = xor(a3,x11);
	x54 = and(x53,x5);
	x55 = or(a2,x54);
	x56 = xor(x52,x55);
	x57 = or(a6,x4);
	x58 = xor(x57,x38);
	x59 = and(x13,x56);
	x60 = and(a2,x59);
	x61 = xor(x58,x60);
	x62 = and(a5,x61);
	x63 = xor(x56,x62);
	out3 = x63
tel

node sbox_2 (a1:int::_, a2:int::_, a3:int::_, a4:int::_, a5:int::_, a6:int::_ )
     returns out1:int::_, out2:int::_, out3:int::_, out4:int::_
let
    	x1 = not(a5);
	x2 = not(a1);
	x3 = xor(a5,a6);
	x4 = xor(x3,x2);
	x5 = xor(x4,a2);
	x6 = or(a6,x1);
	x7 = or(x6,x2);
	x8 = and(a2,x7);
	x9 = xor(a6,x8);
	x10 = and(a3,x9);
	x11 = xor(x5,x10);
	x12 = and(a2,x9);
	x13 = xor(a5,x6);
	x14 = or(a3,x13);
	x15 = xor(x12,x14);
	x16 = and(a4,x15);
	x17 = xor(x11,x16);
	out2 = x17;
	x18 = or(a5,a1);
	x19 = or(a6,x18);
	x20 = xor(x13,x19);
	x21 = xor(x20,a2);
	x22 = or(a6,x4);
	x23 = and(x22,x17);
	x24 = or(a3,x23);
	x25 = xor(x21,x24);
	x26 = or(a6,x2);
	x27 = and(a5,x2);
	x28 = or(a2,x27);
	x29 = xor(x26,x28);
	x30 = xor(x3,x27);
	x31 = xor(x2,x19);
	x32 = and(a2,x31);
	x33 = xor(x30,x32);
	x34 = and(a3,x33);
	x35 = xor(x29,x34);
	x36 = or(a4,x35);
	x37 = xor(x25,x36);
	out3 = x37;
	x38 = and(x21,x32);
	x39 = xor(x38,x5);
	x40 = or(a1,x15);
	x41 = xor(x40,x13);
	x42 = or(a3,x41);
	x43 = xor(x39,x42);
	x44 = or(x28,x41);
	x45 = and(a4,x44);
	x46 = xor(x43,x45);
	out1 = x46;
	x47 = and(x19,x21);
	x48 = xor(x47,x26);
	x49 = and(a2,x33);
	x50 = xor(x49,x21);
	x51 = and(a3,x50);
	x52 = xor(x48,x51);
	x53 = and(x18,x28);
	x54 = and(x53,x50);
	x55 = or(a4,x54);
	x56 = xor(x52,x55);
	out4 = x56
tel

node sbox_3 (a1:int::_, a2:int::_, a3:int::_, a4:int::_, a5:int::_, a6:int::_ )
     returns out1:int::_, out2:int::_, out3:int::_, out4:int::_
let
    x1 = not(a5);
	x2 = not(a6);
	x3 = and(a5,a3);
	x4 = xor(x3,a6);
	x5 = and(a4,x1);
	x6 = xor(x4,x5);
	x7 = xor(x6,a2);
	x8 = and(a3,x1);
	x9 = xor(a5,x2);
	x10 = or(a4,x9);
	x11 = xor(x8,x10);
	x12 = and(x7,x11);
	x13 = xor(a5,x11);
	x14 = or(x13,x7);
	x15 = and(a4,x14);
	x16 = xor(x12,x15);
	x17 = and(a2,x16);
	x18 = xor(x11,x17);
	x19 = and(a1,x18);
	x20 = xor(x7,x19);
	out4 = x20;
	x21 = xor(a3,a4);
	x22 = xor(x21,x9);
	x23 = or(x2,x4);
	x24 = xor(x23,x8);
	x25 = or(a2,x24);
	x26 = xor(x22,x25);
	x27 = xor(a6,x23);
	x28 = or(x27,a4);
	x29 = xor(a3,x15);
	x30 = or(x29,x5);
	x31 = or(a2,x30);
	x32 = xor(x28,x31);
	x33 = or(a1,x32);
	x34 = xor(x26,x33);
	out1 = x34;
	x35 = xor(a3,x9);
	x36 = or(x35,x5);
	x37 = or(x4,x29);
	x38 = xor(x37,a4);
	x39 = or(a2,x38);
	x40 = xor(x36,x39);
	x41 = and(a6,x11);
	x42 = or(x41,x6);
	x43 = xor(x34,x38);
	x44 = xor(x43,x41);
	x45 = and(a2,x44);
	x46 = xor(x42,x45);
	x47 = or(a1,x46);
	x48 = xor(x40,x47);
	out3 = x48;
	x49 = or(x2,x38);
	x50 = xor(x49,x13);
	x51 = xor(x27,x28);
	x52 = or(a2,x51);
	x53 = xor(x50,x52);
	x54 = and(x12,x23);
	x55 = and(x54,x52);
	x56 = or(a1,x55);
	x57 = xor(x53,x56);
	out2 = x57
tel

node sbox_4 (a1:int::_, a2:int::_, a3:int::_, a4:int::_, a5:int::_, a6:int::_ )
     returns out1:int::_, out2:int::_, out3:int::_, out4:int::_
let
    x1 = not(a1);
	x2 = not(a3);
	x3 = or(a1,a3);
	x4 = and(a5,x3);
	x5 = xor(x1,x4);
	x6 = or(a2,a3);
	x7 = xor(x5,x6);
	x8 = and(a1,a5);
	x9 = xor(x8,x3);
	x10 = and(a2,x9);
	x11 = xor(a5,x10);
	x12 = and(a4,x11);
	x13 = xor(x7,x12);
	x14 = xor(x2,x4);
	x15 = and(a2,x14);
	x16 = xor(x9,x15);
	x17 = and(x5,x14);
	x18 = xor(a5,x2);
	x19 = or(a2,x18);
	x20 = xor(x17,x19);
	x21 = or(a4,x20);
	x22 = xor(x16,x21);
	x23 = and(a6,x22);
	x24 = xor(x13,x23);
	out2 = x24;
	x25 = not(x13);
	x26 = or(a6,x22);
	x27 = xor(x25,x26);
	out1 = x27;
	x28 = and(a2,x11);
	x29 = xor(x28,x17);
	x30 = xor(a3,x10);
	x31 = xor(x30,x19);
	x32 = and(a4,x31);
	x33 = xor(x29,x32);
	x34 = xor(x25,x33);
	x35 = and(a2,x34);
	x36 = xor(x24,x35);
	x37 = or(a4,x34);
	x38 = xor(x36,x37);
	x39 = and(a6,x38);
	x40 = xor(x33,x39);
	out4 = x40;
	x41 = xor(x26,x38);
	x42 = xor(x41,x40);
	out3 = x42
tel


node sbox_5 (a1:int::_, a2:int::_, a3:int::_, a4:int::_, a5:int::_, a6:int::_ )
     returns out1:int::_, out2:int::_, out3:int::_, out4:int::_
let
    	x1 = not(a6);
	x2 = not(a3);
	x3 = or(x1,x2);
	x4 = xor(x3,a4);
	x5 = and(a1,x3);
	x6 = xor(x4,x5);
	x7 = or(a6,a4);
	x8 = xor(x7,a3);
	x9 = or(a3,x7);
	x10 = or(a1,x9);
	x11 = xor(x8,x10);
	x12 = and(a5,x11);
	x13 = xor(x6,x12);
	x14 = not(x4);
	x15 = and(x14,a6);
	x16 = or(a1,x15);
	x17 = xor(x8,x16);
	x18 = or(a5,x17);
	x19 = xor(x10,x18);
	x20 = or(a2,x19);
	x21 = xor(x13,x20);
	out3 = x21;
	x22 = or(x2,x15);
	x23 = xor(x22,a6);
	x24 = xor(a4,x22);
	x25 = and(a1,x24);
	x26 = xor(x23,x25);
	x27 = xor(a1,x11);
	x28 = and(x27,x22);
	x29 = or(a5,x28);
	x30 = xor(x26,x29);
	x31 = or(a4,x27);
	x32 = not(x31);
	x33 = or(a2,x32);
	x34 = xor(x30,x33);
	out2 = x34;
	x35 = xor(x2,x15);
	x36 = and(a1,x35);
	x37 = xor(x14,x36);
	x38 = xor(x5,x7);
	x39 = and(x38,x34);
	x40 = or(a5,x39);
	x41 = xor(x37,x40);
	x42 = xor(x2,x5);
	x43 = and(x42,x16);
	x44 = and(x4,x27);
	x45 = and(a5,x44);
	x46 = xor(x43,x45);
	x47 = or(a2,x46);
	x48 = xor(x41,x47);
	out1 = x48;
	x49 = and(x24,x48);
	x50 = xor(x49,x5);
	x51 = xor(x11,x30);
	x52 = or(x51,x50);
	x53 = and(a5,x52);
	x54 = xor(x50,x53);
	x55 = xor(x14,x19);
	x56 = xor(x55,x34);
	x57 = xor(x4,x16);
	x58 = and(x57,x30);
	x59 = and(a5,x58);
	x60 = xor(x56,x59);
	x61 = or(a2,x60);
	x62 = xor(x54,x61);
	out4 = x62
tel

node sbox_6 (a1:int::_, a2:int::_, a3:int::_, a4:int::_, a5:int::_, a6:int::_ )
     returns out1:int::_, out2:int::_, out3:int::_, out4:int::_
let
    x1 = not(a2);
	x2 = not(a5);
	x3 = xor(a2,a6);
	x4 = xor(x3,x2);
	x5 = xor(x4,a1);
	x6 = and(a5,a6);
	x7 = or(x6,x1);
	x8 = and(a5,x5);
	x9 = and(a1,x8);
	x10 = xor(x7,x9);
	x11 = and(a4,x10);
	x12 = xor(x5,x11);
	x13 = xor(a6,x10);
	x14 = and(x13,a1);
	x15 = and(a2,a6);
	x16 = xor(x15,a5);
	x17 = and(a1,x16);
	x18 = xor(x2,x17);
	x19 = or(a4,x18);
	x20 = xor(x14,x19);
	x21 = and(a3,x20);
	x22 = xor(x12,x21);
	out2 = x22;
	x23 = xor(a6,x18);
	x24 = and(a1,x23);
	x25 = xor(a5,x24);
	x26 = xor(a2,x17);
	x27 = or(x26,x6);
	x28 = and(a4,x27);
	x29 = xor(x25,x28);
	x30 = not(x26);
	x31 = or(a6,x29);
	x32 = not(x31);
	x33 = and(a4,x32);
	x34 = xor(x30,x33);
	x35 = and(a3,x34);
	x36 = xor(x29,x35);
	out4 = x36;
	x37 = xor(x6,x34);
	x38 = and(a5,x23);
	x39 = xor(x38,x5);
	x40 = or(a4,x39);
	x41 = xor(x37,x40);
	x42 = or(x16,x24);
	x43 = xor(x42,x1);
	x44 = xor(x15,x24);
	x45 = xor(x44,x31);
	x46 = or(a4,x45);
	x47 = xor(x43,x46);
	x48 = or(a3,x47);
	x49 = xor(x41,x48);
	out1 = x49;
	x50 = or(x5,x38);
	x51 = xor(x50,x6);
	x52 = and(x8,x31);
	x53 = or(a4,x52);
	x54 = xor(x51,x53);
	x55 = and(x30,x43);
	x56 = or(a3,x55);
	x57 = xor(x54,x56);
	out3 = x57
tel


node sbox_7 (a1:int::_, a2:int::_, a3:int::_, a4:int::_, a5:int::_, a6:int::_ )
     returns out1:int::_, out2:int::_, out3:int::_, out4:int::_
let
    x1 = not(a2);
	x2 = not(a5);
	x3 = and(a2,a4);
	x4 = xor(x3,a5);
	x5 = xor(x4,a3);
	x6 = and(a4,x4);
	x7 = xor(x6,a2);
	x8 = and(a3,x7);
	x9 = xor(a1,x8);
	x10 = or(a6,x9);
	x11 = xor(x5,x10);
	x12 = and(a4,x2);
	x13 = or(x12,a2);
	x14 = or(a2,x2);
	x15 = and(a3,x14);
	x16 = xor(x13,x15);
	x17 = xor(x6,x11);
	x18 = or(a6,x17);
	x19 = xor(x16,x18);
	x20 = and(a1,x19);
	x21 = xor(x11,x20);
	out1 = x21;
	x22 = or(a2,x21);
	x23 = xor(x22,x6);
	x24 = xor(x23,x15);
	x25 = xor(x5,x6);
	x26 = or(x25,x12);
	x27 = or(a6,x26);
	x28 = xor(x24,x27);
	x29 = and(x1,x19);
	x30 = and(x23,x26);
	x31 = and(a6,x30);
	x32 = xor(x29,x31);
	x33 = or(a1,x32);
	x34 = xor(x28,x33);
	out4 = x34;
	x35 = and(a4,x16);
	x36 = or(x35,x1);
	x37 = and(a6,x36);
	x38 = xor(x11,x37);
	x39 = and(a4,x13);
	x40 = or(a3,x7);
	x41 = xor(x39,x40);
	x42 = or(x1,x24);
	x43 = or(a6,x42);
	x44 = xor(x41,x43);
	x45 = or(a1,x44);
	x46 = xor(x38,x45);
	out2 = x46;
	x47 = xor(x8,x44);
	x48 = xor(x6,x15);
	x49 = or(a6,x48);
	x50 = xor(x47,x49);
	x51 = xor(x19,x44);
	x52 = xor(a4,x25);
	x53 = and(x52,x46);
	x54 = and(a6,x53);
	x55 = xor(x51,x54);
	x56 = or(a1,x55);
	x57 = xor(x50,x56);
	out3 = x57
tel


node sbox_8 (a1:int::_, a2:int::_, a3:int::_, a4:int::_, a5:int::_, a6:int::_ )
     returns out1:int::_, out2:int::_, out3:int::_, out4:int::_
let
    x1 = not(a1);
	x2 = not(a4);
	x3 = xor(a3,x1);
	x4 = or(a3,x1);
	x5 = xor(x4,x2);
	x6 = or(a5,x5);
	x7 = xor(x3,x6);
	x8 = or(x1,x5);
	x9 = xor(x2,x8);
	x10 = and(a5,x9);
	x11 = xor(x8,x10);
	x12 = and(a2,x11);
	x13 = xor(x7,x12);
	x14 = xor(x6,x9);
	x15 = and(x3,x9);
	x16 = and(a5,x8);
	x17 = xor(x15,x16);
	x18 = or(a2,x17);
	x19 = xor(x14,x18);
	x20 = or(a6,x19);
	x21 = xor(x13,x20);
	out1 = x21;
	x22 = or(a5,x3);
	x23 = and(x22,x2);
	x24 = not(a3);
	x25 = and(x24,x8);
	x26 = and(a5,x4);
	x27 = xor(x25,x26);
	x28 = or(a2,x27);
	x29 = xor(x23,x28);
	x30 = and(a6,x29);
	x31 = xor(x13,x30);
	out4 = x31;
	x32 = xor(x5,x6);
	x33 = xor(x32,x22);
	x34 = or(a4,x13);
	x35 = and(a2,x34);
	x36 = xor(x33,x35);
	x37 = and(a1,x33);
	x38 = xor(x37,x8);
	x39 = xor(a1,x23);
	x40 = and(x39,x7);
	x41 = and(a2,x40);
	x42 = xor(x38,x41);
	x43 = or(a6,x42);
	x44 = xor(x36,x43);
	out3 = x44;
	x45 = xor(a1,x10);
	x46 = xor(x45,x22);
	x47 = not(x7);
	x48 = and(x47,x8);
	x49 = or(a2,x48);
	x50 = xor(x46,x49);
	x51 = xor(x19,x29);
	x52 = or(x51,x38);
	x53 = and(a6,x52);
	x54 = xor(x50,x53);
	out2 = x54
tel


node expand (a1:int::_, a2:int::_, a3:int::_, a4:int::_, a5:int::_, a6:int::_,
        a7:int::_, a8:int::_, a9:int::_, a10:int::_, a11:int::_, a12:int::_,
        a13:int::_, a14:int::_, a15:int::_, a16:int::_, a17:int::_, a18:int::_,
        a19:int::_, a20:int::_, a21:int::_, a22:int::_, a23:int::_, a24:int::_,
        a25:int::_, a26:int::_, a27:int::_, a28:int::_, a29:int::_, a30:int::_,
        a31:int::_, a32:int::_  )
     returns out1:int::_, out2:int::_, out3:int::_, out4:int::_, out5:int::_,
             out6:int::_, out7:int::_, out8:int::_, out9:int::_, out10:int::_,
             out11:int::_, out12:int::_, out13:int::_, out14:int::_, out15:int::_,
             out16:int::_, out17:int::_, out18:int::_, out19:int::_, out20:int::_,
             out21:int::_, out22:int::_, out23:int::_, out24:int::_, out25:int::_,
             out26:int::_, out27:int::_, out28:int::_, out29:int::_, out30:int::_,
             out31:int::_, out32:int::_, out33:int::_, out34:int::_, out35:int::_,
             out36:int::_, out37:int::_, out38:int::_, out39:int::_, out40:int::_,
             out41:int::_, out42:int::_, out43:int::_, out44:int::_, out45:int::_,
             out46:int::_, out47:int::_, out48:int::_ 
let
    out1 = a32;
    out2 = a1;
    out3 = a2;
    out4 = a3;
    out5 = a4;
    out6 = a5;
    out7 = a4;
    out8 = a5;
    out9 = a6;
    out10 = a7;
    out11 = a8;
    out12 = a9;
    out13 = a8;
    out14 = a9;
    out15 = a10;
    out16 = a11;
    out17 = a12;
    out18 = a13;
    out19 = a12;
    out20 = a13;
    out21 = a14;
    out22 = a15;
    out23 = a16;
    out24 = a17;
    out25 = a16;
    out26 = a17;
    out27 = a18;
    out28 = a19;
    out29 = a20;
    out30 = a21;
    out31 = a20;
    out32 = a21;
    out33 = a22;
    out34 = a23;
    out35 = a24;
    out36 = a25;
    out37 = a24;
    out38 = a25;
    out39 = a26;
    out40 = a27;
    out41 = a28;
    out42 = a29;
    out43 = a28;
    out44 = a29;
    out45 = a30;
    out46 = a31;
    out47 = a32;
    out48 = a1
tel


node init_p (a1:int::_, a2:int::_, a3:int::_, a4:int::_, a5:int::_, a6:int::_,
         a7:int::_, a8:int::_, a9:int::_, a10:int::_, a11:int::_, a12:int::_,
         a13:int::_, a14:int::_, a15:int::_, a16:int::_, a17:int::_, a18:int::_,
         a19:int::_, a20:int::_, a21:int::_, a22:int::_, a23:int::_, a24:int::_,
         a25:int::_, a26:int::_, a27:int::_, a28:int::_, a29:int::_, a30:int::_,
         a31:int::_, a32:int::_, a33:int::_, a34:int::_, a35:int::_, a36:int::_,
         a37:int::_, a38:int::_, a39:int::_, a40:int::_, a41:int::_, a42:int::_,
         a43:int::_, a44:int::_, a45:int::_, a46:int::_, a47:int::_, a48:int::_,
         a49:int::_, a50:int::_, a51:int::_, a52:int::_, a53:int::_, a54:int::_,
         a55:int::_, a56:int::_, a57:int::_, a58:int::_, a59:int::_, a60:int::_,
         a61:int::_, a62:int::_, a63:int::_, a64:int::_)
    returns out1:int::_, out2:int::_, out3:int::_, out4:int::_, out5:int::_,
            out6:int::_, out7:int::_, out8:int::_, out9:int::_, out10:int::_,
            out11:int::_, out12:int::_, out13:int::_, out14:int::_, out15:int::_,
            out16:int::_, out17:int::_, out18:int::_, out19:int::_, out20:int::_,
            out21:int::_, out22:int::_, out23:int::_, out24:int::_, out25:int::_,
            out26:int::_, out27:int::_, out28:int::_, out29:int::_, out30:int::_,
            out31:int::_, out32:int::_, out33:int::_, out34:int::_, out35:int::_,
            out36:int::_, out37:int::_, out38:int::_, out39:int::_, out40:int::_,
            out41:int::_, out42:int::_, out43:int::_, out44:int::_, out45:int::_,
            out46:int::_, out47:int::_, out48:int::_, out49:int::_, out50:int::_,
            out51:int::_, out52:int::_, out53:int::_, out54:int::_, out55:int::_,
            out56:int::_, out57:int::_, out58:int::_, out59:int::_, out60:int::_,
            out61:int::_, out62:int::_, out63:int::_, out64:int::_
let
    out1=a58;
    out2=a50;
    out3=a42;
    out4=a34;
    out5=a26;
    out6=a18;
    out7=a10;
    out8=a2;
    out9=a60;
    out10=a52;
    out11=a44;
    out12=a36;
    out13=a28;
    out14=a20;
    out15=a12;
    out16=a4;
    out17=a62;
    out18=a54;
    out19=a46;
    out20=a38;
    out21=a30;
    out22=a22;
    out23=a14;
    out24=a6;
    out25=a64;
    out26=a56;
    out27=a48;
    out28=a40;
    out29=a32;
    out30=a24;
    out31=a16;
    out32=a8;
    out33=a57;
    out34=a49;
    out35=a41;
    out36=a33;
    out37=a25;
    out38=a17;
    out39=a9;
    out40=a1;
    out41=a59;
    out42=a51;
    out43=a43;
    out44=a35;
    out45=a27;
    out46=a19;
    out47=a11;
    out48=a3;
    out49=a61;
    out50=a53;
    out51=a45;
    out52=a37;
    out53=a29;
    out54=a21;
    out55=a13;
    out56=a5;
    out57=a63;
    out58=a55;
    out59=a47;
    out60=a39;
    out61=a31;
    out62=a23;
    out63=a15;
    out64=a7
tel

node final_p (a1:int::_, a2:int::_, a3:int::_, a4:int::_, a5:int::_, a6:int::_,
         a7:int::_, a8:int::_, a9:int::_, a10:int::_, a11:int::_, a12:int::_,
         a13:int::_, a14:int::_, a15:int::_, a16:int::_, a17:int::_, a18:int::_,
         a19:int::_, a20:int::_, a21:int::_, a22:int::_, a23:int::_, a24:int::_,
         a25:int::_, a26:int::_, a27:int::_, a28:int::_, a29:int::_, a30:int::_,
         a31:int::_, a32:int::_, a33:int::_, a34:int::_, a35:int::_, a36:int::_,
         a37:int::_, a38:int::_, a39:int::_, a40:int::_, a41:int::_, a42:int::_,
         a43:int::_, a44:int::_, a45:int::_, a46:int::_, a47:int::_, a48:int::_,
         a49:int::_, a50:int::_, a51:int::_, a52:int::_, a53:int::_, a54:int::_,
         a55:int::_, a56:int::_, a57:int::_, a58:int::_, a59:int::_, a60:int::_,
         a61:int::_, a62:int::_, a63:int::_, a64:int::_)
    returns out1:int::_, out2:int::_, out3:int::_, out4:int::_, out5:int::_,
            out6:int::_, out7:int::_, out8:int::_, out9:int::_, out10:int::_,
            out11:int::_, out12:int::_, out13:int::_, out14:int::_, out15:int::_,
            out16:int::_, out17:int::_, out18:int::_, out19:int::_, out20:int::_,
            out21:int::_, out22:int::_, out23:int::_, out24:int::_, out25:int::_,
            out26:int::_, out27:int::_, out28:int::_, out29:int::_, out30:int::_,
            out31:int::_, out32:int::_, out33:int::_, out34:int::_, out35:int::_,
            out36:int::_, out37:int::_, out38:int::_, out39:int::_, out40:int::_,
            out41:int::_, out42:int::_, out43:int::_, out44:int::_, out45:int::_,
            out46:int::_, out47:int::_, out48:int::_, out49:int::_, out50:int::_,
            out51:int::_, out52:int::_, out53:int::_, out54:int::_, out55:int::_,
            out56:int::_, out57:int::_, out58:int::_, out59:int::_, out60:int::_,
            out61:int::_, out62:int::_, out63:int::_, out64:int::_
let
    out1=a40;
    out2=a8;
    out3=a48;
    out4=a16;
    out5=a56;
    out6=a24;
    out7=a64;
    out8=a32;
    out9=a39;
    out10=a7;
    out11=a47;
    out12=a15;
    out13=a55;
    out14=a23;
    out15=a63;
    out16=a31;
    out17=a38;
    out18=a6;
    out19=a46;
    out20=a14;
    out21=a54;
    out22=a22;
    out23=a62;
    out24=a30;
    out25=a37;
    out26=a5;
    out27=a45;
    out28=a13;
    out29=a53;
    out30=a21;
    out31=a61;
    out32=a29;
    out33=a36;
    out34=a4;
    out35=a44;
    out36=a12;
    out37=a52;
    out38=a20;
    out39=a60;
    out40=a28;
    out41=a35;
    out42=a3;
    out43=a43;
    out44=a11;
    out45=a51;
    out46=a19;
    out47=a59;
    out48=a27;
    out49=a34;
    out50=a2;
    out51=a42;
    out52=a10;
    out53=a50;
    out54=a18;
    out55=a58;
    out56=a26;
    out57=a33;
    out58=a1;
    out59=a41;
    out60=a9;
    out61=a49;
    out62=a17;
    out63=a57;
    out64=a25
tel


node permut (a1:int::_, a2:int::_, a3:int::_, a4:int::_, a5:int::_, a6:int::_,
         a7:int::_, a8:int::_, a9:int::_, a10:int::_, a11:int::_, a12:int::_,
         a13:int::_, a14:int::_, a15:int::_, a16:int::_, a17:int::_, a18:int::_,
         a19:int::_, a20:int::_, a21:int::_, a22:int::_, a23:int::_, a24:int::_,
         a25:int::_, a26:int::_, a27:int::_, a28:int::_, a29:int::_, a30:int::_,
         a31:int::_, a32:int::_ )
    returns out1:int::_, out2:int::_, out3:int::_, out4:int::_, out5:int::_,
            out6:int::_, out7:int::_, out8:int::_, out9:int::_, out10:int::_,
            out11:int::_, out12:int::_, out13:int::_, out14:int::_, out15:int::_,
            out16:int::_, out17:int::_, out18:int::_, out19:int::_, out20:int::_,
            out21:int::_, out22:int::_, out23:int::_, out24:int::_, out25:int::_,
            out26:int::_, out27:int::_, out28:int::_, out29:int::_, out30:int::_,
            out31:int::_, out32:int::_
let
    out1=a16;
    out2=a7;
    out3=a20;
    out4=a21;
    out5=a29;
    out6=a12;
    out7=a28;
    out8=a17;
    out9=a1;
    out10=a15;
    out11=a23;
    out12=a26;
    out13=a5;
    out14=a18;
    out15=a31;
    out16=a10;
    out17=a2;
    out18=a8;
    out19=a24;
    out20=a14;
    out21=a32;
    out22=a27;
    out23=a3;
    out24=a9;
    out25=a19;
    out26=a13;
    out27=a30;
    out28=a6;
    out29=a22;
    out30=a1;
    out31=a4;
    out32=a25
tel


node pc_1 (a1:int::_, a2:int::_, a3:int::_, a4:int::_, a5:int::_, a6:int::_,
         a7:int::_, a8:int::_, a9:int::_, a10:int::_, a11:int::_, a12:int::_,
         a13:int::_, a14:int::_, a15:int::_, a16:int::_, a17:int::_, a18:int::_,
         a19:int::_, a20:int::_, a21:int::_, a22:int::_, a23:int::_, a24:int::_,
         a25:int::_, a26:int::_, a27:int::_, a28:int::_, a29:int::_, a30:int::_,
         a31:int::_, a32:int::_, a33:int::_, a34:int::_, a35:int::_, a36:int::_,
         a37:int::_, a38:int::_, a39:int::_, a40:int::_, a41:int::_, a42:int::_,
         a43:int::_, a44:int::_, a45:int::_, a46:int::_, a47:int::_, a48:int::_,
         a49:int::_, a50:int::_, a51:int::_, a52:int::_, a53:int::_, a54:int::_,
         a55:int::_, a56:int::_, a57:int::_, a58:int::_, a59:int::_, a60:int::_,
         a61:int::_, a62:int::_, a63:int::_, a64:int::_ )
    returns out1:int::_, out2:int::_, out3:int::_, out4:int::_, out5:int::_,
            out6:int::_, out7:int::_, out8:int::_, out9:int::_, out10:int::_,
            out11:int::_, out12:int::_, out13:int::_, out14:int::_, out15:int::_,
            out16:int::_, out17:int::_, out18:int::_, out19:int::_, out20:int::_,
            out21:int::_, out22:int::_, out23:int::_, out24:int::_, out25:int::_,
            out26:int::_, out27:int::_, out28:int::_, out29:int::_, out30:int::_,
            out31:int::_, out32:int::_, out33:int::_, out34:int::_, out35:int::_,
            out36:int::_, out37:int::_, out38:int::_, out39:int::_, out40:int::_,
            out41:int::_, out42:int::_, out43:int::_, out44:int::_, out45:int::_,
            out46:int::_, out47:int::_, out48:int::_, out49:int::_, out50:int::_,
            out51:int::_, out52:int::_, out53:int::_, out54:int::_, out55:int::_,
            out56:int::_
let
    out1=a57;
    out2=a49;
    out3=a41;
    out4=a33;
    out5=a25;
    out6=a17;
    out7=a9;
    out8=a1;
    out9=a58;
    out10=a50;
    out11=a42;
    out12=a34;
    out13=a26;
    out14=a18;
    out15=a10;
    out16=a2;
    out17=a59;
    out18=a51;
    out19=a43;
    out20=a35;
    out21=a27;
    out22=a19;
    out23=a11;
    out24=a3;
    out25=a60;
    out26=a52;
    out27=a44;
    out28=a36;
    out29=a63;
    out30=a55;
    out31=a47;
    out32=a39;
    out33=a31;
    out34=a23;
    out35=a15;
    out36=a7;
    out37=a62;
    out38=a54;
    out39=a46;
    out40=a38;
    out41=a30;
    out42=a22;
    out43=a14;
    out44=a6;
    out45=a61;
    out46=a53;
    out47=a45;
    out48=a37;
    out49=a29;
    out50=a21;
    out51=a13;
    out52=a5;
    out53=a28;
    out54=a20;
    out55=a12;
    out56=a4
tel

node pc_2 (a1:int::_, a2:int::_, a3:int::_, a4:int::_, a5:int::_, a6:int::_,
         a7:int::_, a8:int::_, a9:int::_, a10:int::_, a11:int::_, a12:int::_,
         a13:int::_, a14:int::_, a15:int::_, a16:int::_, a17:int::_, a18:int::_,
         a19:int::_, a20:int::_, a21:int::_, a22:int::_, a23:int::_, a24:int::_,
         a25:int::_, a26:int::_, a27:int::_, a28:int::_, a29:int::_, a30:int::_,
         a31:int::_, a32:int::_, a33:int::_, a34:int::_, a35:int::_, a36:int::_,
         a37:int::_, a38:int::_, a39:int::_, a40:int::_, a41:int::_, a42:int::_,
         a43:int::_, a44:int::_, a45:int::_, a46:int::_, a47:int::_, a48:int::_,
         a49:int::_, a50:int::_, a51:int::_, a52:int::_, a53:int::_, a54:int::_,
         a55:int::_, a56:int::_ )
    returns out1:int::_, out2:int::_, out3:int::_, out4:int::_, out5:int::_,
            out6:int::_, out7:int::_, out8:int::_, out9:int::_, out10:int::_,
            out11:int::_, out12:int::_, out13:int::_, out14:int::_, out15:int::_,
            out16:int::_, out17:int::_, out18:int::_, out19:int::_, out20:int::_,
            out21:int::_, out22:int::_, out23:int::_, out24:int::_, out25:int::_,
            out26:int::_, out27:int::_, out28:int::_, out29:int::_, out30:int::_,
            out31:int::_, out32:int::_, out33:int::_, out34:int::_, out35:int::_,
            out36:int::_, out37:int::_, out38:int::_, out39:int::_, out40:int::_,
            out41:int::_, out42:int::_, out43:int::_, out44:int::_, out45:int::_,
            out46:int::_, out47:int::_, out48:int::_
let
    out1=a14;
    out2=a17;
    out3=a11;
    out4=a24;
    out5=a1;
    out6=a5;
    out7=a3;
    out8=a28;
    out9=a15;
    out10=a6;
    out11=a21;
    out12=a10;
    out13=a23;
    out14=a19;
    out15=a12;
    out16=a4;
    out17=a26;
    out18=a8;
    out19=a16;
    out20=a7;
    out21=a27;
    out22=a20;
    out23=a13;
    out24=a2;
    out25=a41;
    out26=a52;
    out27=a31;
    out28=a37;
    out29=a47;
    out30=a55;
    out31=a30;
    out32=a40;
    out33=a51;
    out34=a45;
    out35=a33;
    out36=a48;
    out37=a44;
    out38=a49;
    out39=a39;
    out40=a56;
    out41=a34;
    out42=a53;
    out43=a46;
    out44=a42;
    out45=a50;
    out46=a36;
    out47=a29;
    out48=a32
tel


node rol_1 (a1:int::_, a2:int::_, a3:int::_, a4:int::_, a5:int::_, a6:int::_,
            a7:int::_, a8:int::_, a9:int::_, a10:int::_, a11:int::_, a12:int::_,
            a13:int::_, a14:int::_, a15:int::_, a16:int::_, a17:int::_, a18:int::_,
            a19:int::_, a20:int::_, a21:int::_, a22:int::_, a23:int::_, a24:int::_,
            a25:int::_, a26:int::_, a27:int::_, a28:int::_ )
    returns out1:int::_, out2:int::_, out3:int::_, out4:int::_, out5:int::_,
            out6:int::_, out7:int::_, out8:int::_, out9:int::_, out10:int::_,
            out11:int::_, out12:int::_, out13:int::_, out14:int::_, out15:int::_,
            out16:int::_, out17:int::_, out18:int::_, out19:int::_, out20:int::_,
            out21:int::_, out22:int::_, out23:int::_, out24:int::_, out25:int::_,
            out26:int::_, out27:int::_, out28:int::_
let
    out1 = a28;
    out2 = a1;
    out3 = a2;
    out4 = a3;
    out5 = a4;
    out6 = a5;
    out7 = a6;
    out8 = a7;
    out9 = a8;
    out10 = a9;
    out11 = a10;
    out12 = a11;
    out13 = a12;
    out14 = a13;
    out15 = a14;
    out16 = a15;
    out17 = a16;
    out18 = a17;
    out19 = a18;
    out20 = a19;
    out21 = a20;
    out22 = a21;
    out23 = a22;
    out24 = a23;
    out25 = a24;
    out26 = a25;
    out27 = a26;
    out28 = a27
tel


node rol_2 (a1:int::_, a2:int::_, a3:int::_, a4:int::_, a5:int::_, a6:int::_,
            a7:int::_, a8:int::_, a9:int::_, a10:int::_, a11:int::_, a12:int::_,
            a13:int::_, a14:int::_, a15:int::_, a16:int::_, a17:int::_, a18:int::_,
            a19:int::_, a20:int::_, a21:int::_, a22:int::_, a23:int::_, a24:int::_,
            a25:int::_, a26:int::_, a27:int::_, a28:int::_ )
    returns out1:int::_, out2:int::_, out3:int::_, out4:int::_, out5:int::_,
            out6:int::_, out7:int::_, out8:int::_, out9:int::_, out10:int::_,
            out11:int::_, out12:int::_, out13:int::_, out14:int::_, out15:int::_,
            out16:int::_, out17:int::_, out18:int::_, out19:int::_, out20:int::_,
            out21:int::_, out22:int::_, out23:int::_, out24:int::_, out25:int::_,
            out26:int::_, out27:int::_, out28:int::_
let
    out1 = a27;
    out2 = a28;
    out3 = a1;
    out4 = a2;
    out5 = a3;
    out6 = a4;
    out7 = a5;
    out8 = a6;
    out9 = a7;
    out10 = a8;
    out11 = a9;
    out12 = a10;
    out13 = a11;
    out14 = a12;
    out15 = a13;
    out16 = a14;
    out17 = a15;
    out18 = a16;
    out19 = a17;
    out20 = a18;
    out21 = a19;
    out22 = a20;
    out23 = a21;
    out24 = a22;
    out25 = a23;
    out26 = a24;
    out27 = a25;
    out28 = a26
tel


node xor48 (a1:int::_, a2:int::_, a3:int::_, a4:int::_, a5:int::_, a6:int::_,
         a7:int::_, a8:int::_, a9:int::_, a10:int::_, a11:int::_, a12:int::_,
         a13:int::_, a14:int::_, a15:int::_, a16:int::_, a17:int::_, a18:int::_,
         a19:int::_, a20:int::_, a21:int::_, a22:int::_, a23:int::_, a24:int::_,
         a25:int::_, a26:int::_, a27:int::_, a28:int::_, a29:int::_, a30:int::_,
         a31:int::_, a32:int::_, a33:int::_, a34:int::_, a35:int::_, a36:int::_,
         a37:int::_, a38:int::_, a39:int::_, a40:int::_, a41:int::_, a42:int::_,
         a43:int::_, a44:int::_, a45:int::_, a46:int::_, a47:int::_, a48:int::_,
         b1:int::_, b2:int::_, b3:int::_, b4:int::_, b5:int::_, b6:int::_,
         b7:int::_, b8:int::_, b9:int::_, b10:int::_, b11:int::_, b12:int::_,
         b13:int::_, b14:int::_, b15:int::_, b16:int::_, b17:int::_, b18:int::_,
         b19:int::_, b20:int::_, b21:int::_, b22:int::_, b23:int::_, b24:int::_,
         b25:int::_, b26:int::_, b27:int::_, b28:int::_, b29:int::_, b30:int::_,
         b31:int::_, b32:int::_, b33:int::_, b34:int::_, b35:int::_, b36:int::_,
         b37:int::_, b38:int::_, b39:int::_, b40:int::_, b41:int::_, b42:int::_,
         b43:int::_, b44:int::_, b45:int::_, b46:int::_, b47:int::_, b48:int::_)
     returns out1:int::_, out2:int::_, out3:int::_, out4:int::_, out5:int::_,
             out6:int::_, out7:int::_, out8:int::_, out9:int::_, out10:int::_,
             out11:int::_, out12:int::_, out13:int::_, out14:int::_, out15:int::_,
             out16:int::_, out17:int::_, out18:int::_, out19:int::_, out20:int::_,
             out21:int::_, out22:int::_, out23:int::_, out24:int::_, out25:int::_,
             out26:int::_, out27:int::_, out28:int::_, out29:int::_, out30:int::_,
             out31:int::_, out32:int::_, out33:int::_, out34:int::_, out35:int::_,
             out36:int::_, out37:int::_, out38:int::_, out39:int::_, out40:int::_,
             out41:int::_, out42:int::_, out43:int::_, out44:int::_, out45:int::_,
             out46:int::_, out47:int::_, out48:int::_
let
    out1 = xor(a1,b1);
    out2 = xor(a2,b2);
    out3 = xor(a3,b3);
    out4 = xor(a4,b4);
    out5 = xor(a5,b5);
    out6 = xor(a6,b6);
    out7 = xor(a7,b7);
    out8 = xor(a8,b8);
    out9 = xor(a9,b9);
    out10 = xor(a10,b10);
    out11 = xor(a11,b11);
    out12 = xor(a12,b12);
    out13 = xor(a13,b13);
    out14 = xor(a14,b14);
    out15 = xor(a15,b15);
    out16 = xor(a16,b16);
    out17 = xor(a17,b17);
    out18 = xor(a18,b18);
    out19 = xor(a19,b19);
    out20 = xor(a20,b20);
    out21 = xor(a21,b21);
    out22 = xor(a22,b22);
    out23 = xor(a23,b23);
    out24 = xor(a24,b24);
    out25 = xor(a25,b25);
    out26 = xor(a26,b26);
    out27 = xor(a27,b27);
    out28 = xor(a28,b28);
    out29 = xor(a29,b29);
    out30 = xor(a30,b30);
    out31 = xor(a31,b31);
    out32 = xor(a32,b32);
    out33 = xor(a33,b33);
    out34 = xor(a34,b34);
    out35 = xor(a35,b35);
    out36 = xor(a36,b36);
    out37 = xor(a37,b37);
    out38 = xor(a38,b38);
    out39 = xor(a39,b39);
    out40 = xor(a40,b40);
    out41 = xor(a41,b41);
    out42 = xor(a42,b42);
    out43 = xor(a43,b43);
    out44 = xor(a44,b44);
    out45 = xor(a45,b45);
    out46 = xor(a46,b46);
    out47 = xor(a47,b47);
    out48 = xor(a48,b48)
tel


node xor32 (a1:int::_, a2:int::_, a3:int::_, a4:int::_, a5:int::_, a6:int::_,
         a7:int::_, a8:int::_, a9:int::_, a10:int::_, a11:int::_, a12:int::_,
         a13:int::_, a14:int::_, a15:int::_, a16:int::_, a17:int::_, a18:int::_,
         a19:int::_, a20:int::_, a21:int::_, a22:int::_, a23:int::_, a24:int::_,
         a25:int::_, a26:int::_, a27:int::_, a28:int::_, a29:int::_, a30:int::_,
         a31:int::_, a32:int::_,
         b1:int::_, b2:int::_, b3:int::_, b4:int::_, b5:int::_, b6:int::_,
         b7:int::_, b8:int::_, b9:int::_, b10:int::_, b11:int::_, b12:int::_,
         b13:int::_, b14:int::_, b15:int::_, b16:int::_, b17:int::_, b18:int::_,
         b19:int::_, b20:int::_, b21:int::_, b22:int::_, b23:int::_, b24:int::_,
         b25:int::_, b26:int::_, b27:int::_, b28:int::_, b29:int::_, b30:int::_,
         b31:int::_, b32:int::_)
     returns out1:int::_, out2:int::_, out3:int::_, out4:int::_, out5:int::_,
             out6:int::_, out7:int::_, out8:int::_, out9:int::_, out10:int::_,
             out11:int::_, out12:int::_, out13:int::_, out14:int::_, out15:int::_,
             out16:int::_, out17:int::_, out18:int::_, out19:int::_, out20:int::_,
             out21:int::_, out22:int::_, out23:int::_, out24:int::_, out25:int::_,
             out26:int::_, out27:int::_, out28:int::_, out29:int::_, out30:int::_,
             out31:int::_, out32:int::_
let
    out1 = xor(a1,b1);
    out2 = xor(a2,b2);
    out3 = xor(a3,b3);
    out4 = xor(a4,b4);
    out5 = xor(a5,b5);
    out6 = xor(a6,b6);
    out7 = xor(a7,b7);
    out8 = xor(a8,b8);
    out9 = xor(a9,b9);
    out10 = xor(a10,b10);
    out11 = xor(a11,b11);
    out12 = xor(a12,b12);
    out13 = xor(a13,b13);
    out14 = xor(a14,b14);
    out15 = xor(a15,b15);
    out16 = xor(a16,b16);
    out17 = xor(a17,b17);
    out18 = xor(a18,b18);
    out19 = xor(a19,b19);
    out20 = xor(a20,b20);
    out21 = xor(a21,b21);
    out22 = xor(a22,b22);
    out23 = xor(a23,b23);
    out24 = xor(a24,b24);
    out25 = xor(a25,b25);
    out26 = xor(a26,b26);
    out27 = xor(a27,b27);
    out28 = xor(a28,b28);
    out29 = xor(a29,b29);
    out30 = xor(a30,b30);
    out31 = xor(a31,b31);
    out32 = xor(a32,b32)
tel



node des (a1:int::_, a2:int::_, a3:int::_, a4:int::_, a5:int::_, a6:int::_,
          a7:int::_, a8:int::_, a9:int::_, a10:int::_, a11:int::_, a12:int::_,
          a13:int::_, a14:int::_, a15:int::_, a16:int::_, a17:int::_, a18:int::_,
          a19:int::_, a20:int::_, a21:int::_, a22:int::_, a23:int::_, a24:int::_,
          a25:int::_, a26:int::_, a27:int::_, a28:int::_, a29:int::_, a30:int::_,
          a31:int::_, a32:int::_, a33:int::_, a34:int::_, a35:int::_, a36:int::_,
          a37:int::_, a38:int::_, a39:int::_, a40:int::_, a41:int::_, a42:int::_,
          a43:int::_, a44:int::_, a45:int::_, a46:int::_, a47:int::_, a48:int::_,
          a49:int::_, a50:int::_, a51:int::_, a52:int::_, a53:int::_, a54:int::_,
          a55:int::_, a56:int::_, a57:int::_, a58:int::_, a59:int::_, a60:int::_,
          a61:int::_, a62:int::_, a63:int::_, a64:int::_,
          k1:int::_, k2:int::_, k3:int::_, k4:int::_, k5:int::_, k6:int::_,
          k7:int::_, k8:int::_, k9:int::_, k10:int::_, k11:int::_, k12:int::_,
          k13:int::_, k14:int::_, k15:int::_, k16:int::_, k17:int::_, k18:int::_,
          k19:int::_, k20:int::_, k21:int::_, k22:int::_, k23:int::_, k24:int::_,
          k25:int::_, k26:int::_, k27:int::_, k28:int::_, k29:int::_, k30:int::_,
          k31:int::_, k32:int::_, k33:int::_, k34:int::_, k35:int::_, k36:int::_,
          k37:int::_, k38:int::_, k39:int::_, k40:int::_, k41:int::_, k42:int::_,
          k43:int::_, k44:int::_, k45:int::_, k46:int::_, k47:int::_, k48:int::_,
          k49:int::_, k50:int::_, k51:int::_, k52:int::_, k53:int::_, k54:int::_,
          k55:int::_, k56:int::_, k57:int::_, k58:int::_, k59:int::_, k60:int::_,
          k61:int::_, k62:int::_, k63:int::_, k64:int::_)
    returns out1:int::_, out2:int::_, out3:int::_, out4:int::_, out5:int::_,
            out6:int::_, out7:int::_, out8:int::_, out9:int::_, out10:int::_,
            out11:int::_, out12:int::_, out13:int::_, out14:int::_, out15:int::_,
            out16:int::_, out17:int::_, out18:int::_, out19:int::_, out20:int::_,
            out21:int::_, out22:int::_, out23:int::_, out24:int::_, out25:int::_,
            out26:int::_, out27:int::_, out28:int::_, out29:int::_, out30:int::_,
            out31:int::_, out32:int::_, out33:int::_, out34:int::_, out35:int::_,
            out36:int::_, out37:int::_, out38:int::_, out39:int::_, out40:int::_,
            out41:int::_, out42:int::_, out43:int::_, out44:int::_, out45:int::_,
            out46:int::_, out47:int::_, out48:int::_, out49:int::_, out50:int::_,
            out51:int::_, out52:int::_, out53:int::_, out54:int::_, out55:int::_,
            out56:int::_, out57:int::_, out58:int::_, out59:int::_, out60:int::_,
            out61:int::_, out62:int::_, out63:int::_, out64:int::_
let
    # Initial permutation, and splitting into left and right 
    (l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16,
     l17, l18, l19, l20, l21, l22, l23, l24, l25, l26, l27, l28, l29, l30, l31, l32,
     r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16,
     r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32)
          = init_p(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12,
               a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24,
               a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36,
               a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48,
               a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60,
               a61, a62, a63, a64);

    # Initial key splitting and mixing.
    (kl1, kl2, kl3, kl4, kl5, kl6, kl7, kl8, kl9, kl10, kl11, kl12, kl13, kl14, kl15, kl16,
     kl17, kl18, kl19, kl20, kl21, kl22, kl23, kl24, kl25, kl26, kl27, kl28,
     kr1, kr2, kr3, kr4, kr5, kr6, kr7, kr8, kr9, kr10, kr11, kr12, kr13, kr14, kr15, kr16,
     kr17, kr18, kr19, kr20, kr21, kr22, kr23, kr24, kr25, kr26, kr27, kr28)
           = pc_1(k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
               k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24,
               k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36,
               k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48,
               k49, k50, k51, k52, k53, k54, k55, k56, k57, k58, k59, k60,
               k61, k62, k63, k64);

    ################## Main part (the 16 rounds) ##################

    ##### Round 1 #####

    # Expantion of R
    (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16,
    a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32,
    a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48)
         = expand(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12,
                  r13, r14, r15, r16, r17, r18, r19, r20, r21, r22,
                  r23, r24, r25, r26, r27, r28, r29, r30, r31, r32);

    # Computation of the round key
    (kl1, kl2, kl3, kl4, kl5, kl6, kl7, kl8, kl9, kl10, kl11, kl12, kl13, kl14, kl15, kl16,
     kl17, kl18, kl19, kl20, kl21, kl22, kl23, kl24, kl25, kl26, kl27, kl28)
           = rol_1(kl1, kl2, kl3, kl4, kl5, kl6, kl7, kl8, kl9, kl10, kl11,
                  kl12, kl13, kl14, kl15, kl16, kl17, kl18, kl19, kl20, kl21,
                  kl22, kl23, kl24, kl25, kl26, kl27, kl28);
    (kr1, kr2, kr3, kr4, kr5, kr6, kr7, kr8, kr9, kr10, kr11, kr12, kr13, kr14, kr15, kr16,
     kr17, kr18, kr19, kr20, kr21, kr22, kr23, kr24, kr25, kr26, kr27, kr28)
           = rol_1(kr1, kr2, kr3, kr4, kr5, kr6, kr7, kr8, kr9, kr10, kr11,
                  kr12, kr13, kr14, kr15, kr16, kr17, kr18, kr19, kr20, kr21,
                  kr22, kr23, kr24, kr25, kr26, kr27, kr28);
    (k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
     k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24,
     k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36,
     k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48)
          = pc_2(kl1, kl2, kl3, kl4, kl5, kl6, kl7, kl8, kl9, kl10, kl11, kl12, kl13,
                 kl14, kl15, kl16,  kl17, kl18, kl19, kl20, kl21, kl22, kl23, kl24,
                 kl25, kl26, kl27, kl28, kr1, kr2, kr3, kr4, kr5, kr6, kr7, kr8,
                 kr9, kr10, kr11, kr12, kr13, kr14, kr15, kr16, kr17, kr18,
                 kr19, kr20, kr21, kr22, kr23, kr24, kr25, kr26, kr27, kr28);

    # Xoring key and R
    (s1_1, s1_2, s1_3, s1_4, s1_5, s1_6,
     s2_1, s2_2, s2_3, s2_4, s2_5, s2_6,
     s3_1, s3_2, s3_3, s3_4, s3_5, s3_6,
     s4_1, s4_2, s4_3, s4_4, s4_5, s4_6,
     s5_1, s5_2, s5_3, s5_4, s5_5, s5_6,
     s6_1, s6_2, s6_3, s6_4, s6_5, s6_6,
     s7_1, s7_2, s7_3, s7_4, s7_5, s7_6,
     s8_1, s8_2, s8_3, s8_4, s8_5, s8_6)
          = xor48(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12,
                  a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24,
                  a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36,
                  a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48,
                  k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12,
                  k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24,
                  k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36,
                  k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48);

    # Sboxes.
    (c1, c2, c3, c4) = sbox_1(s1_1, s1_2, s1_3, s1_4, s1_5, s1_6);
    (c5, c6, c7, c8) = sbox_2(s2_1, s2_2, s2_3, s2_4, s2_5, s2_6);
    (c9, c10, c11, c12) = sbox_3(s3_1, s3_2, s3_3, s3_4, s3_5, s3_6);
    (c13, c14, c15, c16) = sbox_4(s4_1, s4_2, s4_3, s4_4, s4_5, s4_6);
    (c17, c18, c19, c20) = sbox_5(s5_1, s5_2, s5_3, s5_4, s5_5, s5_6);
    (c21, c22, c23, c24) = sbox_6(s6_1, s6_2, s6_3, s6_4, s6_5, s6_6);
    (c25, c26, c27, c28) = sbox_7(s7_1, s7_2, s7_3, s7_4, s7_5, s7_6);
    (c29, c30, c31, c32) = sbox_8(s8_1, s8_2, s8_3, s8_4, s8_5, s8_6);

    # Permutation
    (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12,
    c13, c14, c15, c16, c17, c18, c19, c20, c21, c22,
    c23, c24, c25, c26, c27, c28, c29, c30, c31, c32)
      = permut(c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12,
               c13, c14, c15, c16, c17, c18, c19, c20, c21, c22,
               c23, c24, c25, c26, c27, c28, c29, c30, c31, c32);

    # Temporary saving R
    (t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12,
    t13, t14, t15, t16, t17, t18, t19, t20, t21, t22,
    t23, t24, t25, t26, t27, t28, t29, t30, t31, t32)
         = (r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12,
            r13, r14, r15, r16, r17, r18, r19, r20, r21, r22,
            r23, r24, r25, r26, r27, r28, r29, r30, r31, r32);

    # The new R is C XOR L
    (r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12,
     r13, r14, r15, r16, r17, r18, r19, r20, r21, r22,
     r23, r24, r25, r26, r27, r28, r29, r30, r31, r32)
          = xor32(c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12,
                  c13, c14, c15, c16, c17, c18, c19, c20, c21, c22,
                  c23, c24, c25, c26, c27, c28, c29, c30, c31, c32,
                  l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12,
                  l13, l14, l15, l16, l17, l18, l19, l20, l21, l22,
                  l23, l24, l25, l26, l27, l28, l29, l30, l31, l32 );

    # The new L is the old R
    (l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12,
    l13, l14, l15, l16, l17, l18, l19, l20, l21, l22,
    l23, l24, l25, l26, l27, l28, l29, l30, l31, l32)
         = (t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12,
            t13, t14, t15, t16, t17, t18, t19, t20, t21, t22,
            t23, t24, t25, t26, t27, t28, t29, t30, t31, t32);

    
    ##### Round 2 #####



    # Regrouping left and right and computing final permuation
    (out1, out2, out3, out4, out5, out6, out7, out8, out9, out10, out11, out12,
     out13, out14, out15, out16, out17, out18, out19, out20, out21, out22, out23, out24,
     out25, out26, out27, out28, out29, out30, out31, out32, out33, out34, out35, out36,
     out37, out38, out39, out40, out41, out42, out43, out44, out45, out46, out47, out48,
     out49, out50, out51, out52, out53, out54, out55, out56, out57, out58, out59, out60,
     out61, out62, out63, out64)
       = final_p(l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16,
     l17, l18, l19, l20, l21, l22, l23, l24, l25, l26, l27, l28, l29, l30, l31, l32,
     r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16,
     r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32)
    
tel
