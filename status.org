* Tasks
** DONE Basic parser/lexer
   CLOSED: [2017-02-14 mar. 09:51]
** DONE AST pretty-printer
   CLOSED: [2017-02-14 mar. 09:51]
** DONE Kwan's 4th S-box
   CLOSED: [2017-02-14 mar. 09:51]
** DONE Fix the reduce/reduce conflicts of the parser.
   CLOSED: [2017-02-14 mar. 09:51]
** DONE Implement merge
   CLOSED: [2017-02-14 mar. 15:37]
*** DONE Fix merge conflicts
    CLOSED: [2017-02-14 mar. 15:37]
** DONE Remove useless abstraction in the AST (ex: type pat = AST_pat of ident list)
   CLOSED: [2017-02-14 mar. 10:45]
** DONE Add line/column number to errors
   CLOSED: [2017-02-14 mar. 15:53]
** DONE Add a few detailed examples
   CLOSED: [2017-02-14 mar. 16:20]
** DONE Generate OCaml code (string concatenation)
   CLOSED: [2017-02-15 mer. 10:50]
** DONE Implement generation of multiplexeur
   CLOSED: [2017-02-15 mer. 11:52]
** DONE Modify parser/lexer to use boolean as base type
   CLOSED: [2017-02-15 mer. 11:52]
** DONE Verify that the logical s-box is indeed equivalent to the lookup table 
   CLOSED: [2017-02-15 mer. 16:21]
** DONE Switch from bool -> bool to int -> int
   CLOSED: [2017-02-15 mer. 18:42]
** TODO [#C] Improve pretty printing (with [[http://gallium.inria.fr/blog/first-release-of-pprint/][Ocaml PPrint]] eventually)
** TODO [#B] Think about the convertion of the demultiplexer to OCaml.
   in particular, for now, I change True to 1 and False to 0. 
   This might not work in the future.
** TODO [#B] Get familiar with ppx, parsetree, and co.
** TODO Move to bitslicing code. (need to think about it)
** TODO Learn org-mode!


* Examples

** Compilation (parsing, generating OCaml code...)

The program main.native parses a file, creates an AST, print this AST (which looks 
quite like the original program), and generates the OCaml code corresponding to it.
#+BEGIN_SRC bash
    cd src
    make
    ./main.native tests/simple_node.prog      # just a basic program
    ./main.native tests/simple_when.prog      # a simple when
    ./main.native tests/simple_merge.prog     # a simple merge
    ./main.native tests/s-box-4.prog          # Kwan's 4th s-box
    ./main.native tests/nested_merge.prog     # a nested merge (to make sure the 
                                              # parser works fine on those)
    ./main.native tests/multiple_nodes.prog   # definition of multiple nodes. 
    ./main.native tests/complete_prog_1.prog  # a slightly more complex program
#+END_SRC


** Equivalence of the lookup based and logical gate based s-box

A standart (ie. with a lookup table) implementation of the 4-th S-box, as well as a
logical one, generated with the command =./main.native tests/s-box-4.prog= are available
in the file =src/tests/verif_sbox.ml= .
It allows you to check that both implementations are equivalent: you just need to run
=ocaml src/tests/verif_sbox.ml=



* Notes

** A tuple has necessary at least 2 elements. 
First, a tuple of 1 element is just a variable (this element). Secondly, it's easier to parse.
